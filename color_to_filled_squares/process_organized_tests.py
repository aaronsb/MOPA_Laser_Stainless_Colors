"""
Process organized test suite - generates SVG files for all algorithms.

This script processes all test patterns generated by generate_organized_tests.py
and creates SVG files for each algorithm in the organized directory structure.
"""

import os
import sys
import subprocess
from pathlib import Path
import time


def process_test_pattern(input_path, output_dir, algorithm):
    """
    Process a single test pattern with the specified algorithm.

    Args:
        input_path: Path to input PNG file
        output_dir: Directory for output SVG
        algorithm: 'original', 'retinex_floyd', or 'retinex_atkinson'

    Returns:
        (svg_path, preview_path) tuple
    """
    basename = Path(input_path).stem

    if algorithm == 'original':
        output_svg = os.path.join(output_dir, f"{basename}.svg")
        subprocess.run([
            sys.executable,
            "color_to_squares.py",
            input_path,
            output_svg,
            "0.25"
        ], capture_output=True, check=True)
        return output_svg, None

    else:  # retinex algorithms
        dithering = 'floyd-steinberg' if algorithm == 'retinex_floyd' else 'atkinson'
        output_svg = os.path.join(output_dir, f"{basename}.svg")

        subprocess.run([
            sys.executable,
            "color_to_squares_retinex.py",
            input_path,
            output_svg,
            "0.25",
            dithering
        ], capture_output=True, check=True)

        preview_path = output_svg.replace('.svg', '_preview.png')
        return output_svg, preview_path


def create_comparison_preview(test_name, preview_floyd, preview_atk, output_dir):
    """
    Create a side-by-side comparison image for previews.

    Args:
        test_name: Name of the test
        preview_floyd: Path to Floyd-Steinberg preview
        preview_atk: Path to Atkinson preview
        output_dir: Directory to save comparison
    """
    from PIL import Image

    if not os.path.exists(preview_floyd) or not os.path.exists(preview_atk):
        return None

    img_floyd = Image.open(preview_floyd)
    img_atk = Image.open(preview_atk)

    margin = 20
    label_height = 30

    width = img_floyd.width * 2 + margin * 3
    height = img_floyd.height + label_height + margin * 2

    comparison = Image.new('RGB', (width, height), color=(50, 50, 50))

    # Paste images side by side
    comparison.paste(img_floyd, (margin, margin + label_height))
    comparison.paste(img_atk, (margin * 2 + img_floyd.width, margin + label_height))

    output_path = os.path.join(output_dir, f"{test_name}_comparison.png")
    comparison.save(output_path)

    return output_path


def process_all_tests(base_dir="tests"):
    """
    Process all tests in the organized structure.

    Args:
        base_dir: Base directory containing test categories
    """
    print("=" * 70)
    print("PROCESSING ORGANIZED TEST SUITE")
    print("=" * 70)
    print()

    if not os.path.exists(base_dir):
        print(f"❌ Error: Test directory '{base_dir}' not found!")
        print("   Run generate_organized_tests.py first to create test patterns.")
        return

    # Find all test categories
    categories = sorted([d for d in os.listdir(base_dir)
                        if os.path.isdir(os.path.join(base_dir, d)) and d.startswith('0')])

    if not categories:
        print(f"❌ Error: No test categories found in '{base_dir}/'")
        return

    total_processed = 0
    total_failed = 0
    start_time = time.time()

    for category in categories:
        cat_path = os.path.join(base_dir, category)
        input_dir = os.path.join(cat_path, 'input')

        if not os.path.exists(input_dir):
            continue

        # Get all input test patterns
        test_patterns = sorted(Path(input_dir).glob("*.png"))

        if not test_patterns:
            continue

        print(f"\n📁 {category.upper()}")
        print("-" * 70)

        for test_pattern in test_patterns:
            test_name = test_pattern.stem
            print(f"  Processing: {test_name:30s}", end=" ", flush=True)

            try:
                test_start = time.time()

                # Process with all three algorithms
                svg_dirs = {
                    'original': os.path.join(cat_path, 'svg_for_laser', 'original'),
                    'retinex_floyd': os.path.join(cat_path, 'svg_for_laser', 'retinex_floyd'),
                    'retinex_atkinson': os.path.join(cat_path, 'svg_for_laser', 'retinex_atkinson'),
                }

                preview_dir = os.path.join(cat_path, 'previews')

                # Process each algorithm
                svg_original, _ = process_test_pattern(
                    str(test_pattern), svg_dirs['original'], 'original'
                )

                svg_floyd, preview_floyd = process_test_pattern(
                    str(test_pattern), svg_dirs['retinex_floyd'], 'retinex_floyd'
                )

                svg_atk, preview_atk = process_test_pattern(
                    str(test_pattern), svg_dirs['retinex_atkinson'], 'retinex_atkinson'
                )

                # Create comparison preview
                if preview_floyd and preview_atk:
                    create_comparison_preview(test_name, preview_floyd, preview_atk, preview_dir)

                    # Move preview images to preview directory
                    if os.path.exists(preview_floyd):
                        os.rename(preview_floyd, os.path.join(preview_dir, Path(preview_floyd).name))
                    if os.path.exists(preview_atk):
                        os.rename(preview_atk, os.path.join(preview_dir, Path(preview_atk).name))

                elapsed = time.time() - test_start
                print(f"✓ ({elapsed:.2f}s)")
                total_processed += 1

            except Exception as e:
                print(f"✗ Error: {e}")
                total_failed += 1

    total_time = time.time() - start_time

    print("\n" + "=" * 70)
    print("✅ PROCESSING COMPLETE")
    print("=" * 70)
    print(f"\nProcessed:  {total_processed} test patterns")
    print(f"Failed:     {total_failed}")
    print(f"Total time: {total_time:.1f}s")
    print(f"\nSVG files ready in: {base_dir}/*/svg_for_laser/")
    print(f"Previews in:        {base_dir}/*/previews/")
    print()


if __name__ == "__main__":
    base_dir = "tests"
    if len(sys.argv) > 1:
        base_dir = sys.argv[1]

    process_all_tests(base_dir)
